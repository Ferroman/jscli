#!/usr/bin/env node

// used as alternative to 'assert' or 'with' which are not
// available in node 18, could be replaced with 
// import {version} from '../package.json' assert {type: 'json'}
// in the newer versions
// import { createRequire } from "module";
// const require = createRequire(import.meta.url);
// const version = require('../package.json');

import commandLineArgs from 'command-line-args';
import commandLineUsage from 'command-line-usage';
import sampleCommand from './commands/sampleCommand/index.js'
import { sampleCommandDefinitions } from './commands/sampleCommand/index.js'

const globalOptionsDefinitions = [
    { name: 'command', defaultOption: true },
    {
        name: 'config',
        type: String,
        description: 'Config path',
    },
    {
        name: 'help',
        alias: 'h',
        type: Boolean,
        description: 'Display this usage guide.',
    },
];

const globalHelp = [
    {
        header: 'CLI',
        content: 'My CLI',
    },
    {
        header: 'Synopsis',
        content: '$ <%= it.name %> <global options> <command>',
    },
    {
        header: 'Available Commands',
        content: [
            { name: 'sample|s', summary: 'Sample command' },
        ],
    },
    {
        header: 'Global Options',
        optionList: globalOptionsDefinitions,
    },
];

export default function cli() {
  const mainOptions = commandLineArgs(globalOptionsDefinitions, {
      stopAtFirstUnknown: true,
  });

  let argv = mainOptions._unknown || [];

  // if (mainOptions.version) {
  //     process.stdout.write(version);
  //     process.exit(0);
  // }

  if (!mainOptions.command) {
      const usage = commandLineUsage(globalHelp);
      process.stdout.write(usage);
      process.exit(0);
  }

  const sampleCommands = [sampleCommandDefinitions[0].name, sampleCommandDefinitions[0].alias];
  if (sampleCommands.indexOf(mainOptions.command) > -1) {
      if (mainOptions.help) {
          argv.push('--help');
      }
      sampleCommand(mainOptions, argv)
      process.exit(0);
  }
}
